{
	"info": {
		"_postman_id": "5f9b2a20-6c73-4f34-a899-3ce2d284acd4",
		"name": "Carna Project Api Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.environment.set(\"access_token\", pm.response.json().token);\r",
							"})\r",
							"\r",
							"pm.test(\"Should return token and user matching username\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).to.match(/^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return refresh token cookie\", function () {\r",
							"    pm.expect(pm.cookies.has('refresh-token')).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"admin\",\r\n    \"password\":\"admin123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Refresh",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.environment.set(\"access_token\", pm.response.json().token);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"     pm.expect(jsonData.token).to.match(/^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$/);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:5001/api/auth/refresh",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"refresh"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"user_id\", pm.response.json().id);\r",
							"});\r",
							"\r",
							"pm.test(\"Should get created user\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.id).to.match(/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/)\r",
							"    pm.expect(responseJson.firstName).to.eql(\"test\");\r",
							"    pm.expect(responseJson.lastName).to.eql(\"test\");\r",
							"    pm.expect(responseJson.username).to.eql(\"test\");\r",
							"    pm.expect(responseJson.isActive).to.be.true;\r",
							"    pm.expect(responseJson.role).to.eql(\"user\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"test\",\r\n    \"lastName\": \"test\",\r\n    \"username\": \"test\",\r\n    \"password\": \"test123456\",\r\n    \"role\": \"user\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5001/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "users/{{user_id}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should get user with matching id\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    const id = pm.environment.get(\"user_id\");\r",
							"\r",
							"    pm.expect(responseJson.id).to.eql(id);\r",
							"    pm.expect(responseJson.firstName).to.eql(\"test\");\r",
							"    pm.expect(responseJson.lastName).to.eql(\"test\");\r",
							"    pm.expect(responseJson.username).to.eql(\"test\");\r",
							"    pm.expect(responseJson.role).to.eql(\"user\");\r",
							"    pm.expect(responseJson.isActive).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5001/api/users/{{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "users/{{user_id}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should get id and updated fields\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    const id = pm.environment.get(\"user_id\");\r",
							"\r",
							"    pm.expect(responseJson.id).to.eql(id);\r",
							"    pm.expect(responseJson.firstName).to.eql(\"test2\");\r",
							"    pm.expect(responseJson.lastName).to.eql(\"test2\");\r",
							"    pm.expect(responseJson.username).to.eql(\"test2\");\r",
							"    pm.expect(responseJson.role).to.eql(\"editor\");\r",
							"    pm.expect(responseJson.isActive).to.be.false;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"test2\",\r\n    \"lastName\": \"test2\",\r\n    \"username\": \"test2\",\r\n    \"password\": \"test2123456\",\r\n    \"isActive\": false,\r\n    \"role\": \"editor\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/users/{{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "users/{{user_id}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should get deleted user's id\", function () {\r",
							"    const id = pm.environment.get(\"user_id\");\r",
							"\r",
							"    pm.response.to.have.body(id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5001/api/users/{{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "courses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"course_id\", pm.response.json().id);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return created course\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const id = pm.environment.get(\"course_id\");\r",
							"\r",
							"    pm.expect(jsonData.name).to.eql(\"test\");\r",
							"    pm.expect(jsonData.description).to.eql(\"test\");\r",
							"    pm.expect(jsonData.dateCreated).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?Z?/gm)\r",
							"    pm.expect(jsonData.id).to.eql(id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"test\",\r\n    \"description\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/courses",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"courses"
					]
				}
			},
			"response": []
		},
		{
			"name": "courses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should get an array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5001/api/courses",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"courses"
					]
				}
			},
			"response": []
		},
		{
			"name": "courses/{{course_id}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should get user with matching id\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const id = pm.environment.get(\"course_id\");\r",
							"    \r",
							"    pm.expect(jsonData.id).to.eql(id);\r",
							"    pm.expect(jsonData.name).to.eql(\"test\");\r",
							"    pm.expect(jsonData.description).to.eql(\"test\");\r",
							"    pm.expect(jsonData.dateCreated).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?Z?/gm);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5001/api/courses/{{course_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"courses",
						"{{course_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "courses/{{course_id}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return updated fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const id = pm.environment.get(\"course_id\");\r",
							"\r",
							"    pm.expect(jsonData.id).to.eql(id);\r",
							"    pm.expect(jsonData.name).to.eql(\"test2\");\r",
							"    pm.expect(jsonData.description).to.eql(\"test2\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"test2\",\r\n    \"description\": \"test2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/courses/{{course_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"courses",
						"{{course_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "courses/{{course_id}}/contents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"content_id\", pm.response.json().id);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return the created content\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const course_id = pm.environment.get(\"course_id\");\r",
							"    const content_id = pm.environment.get(\"content_id\");\r",
							"\r",
							"    pm.expect(jsonData.courseId).to.eql(course_id);\r",
							"    pm.expect(jsonData.name).to.eql(\"test\");\r",
							"    pm.expect(jsonData.description).to.eql(\"test\");\r",
							"    pm.expect(jsonData.dateCreated).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?Z?/gm)\r",
							"    pm.expect(jsonData.id).to.eql(content_id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"test\",\r\n    \"description\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/courses/{{course_id}}/contents",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"courses",
						"{{course_id}}",
						"contents"
					]
				}
			},
			"response": []
		},
		{
			"name": "courses/{{course_id}}/contents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5001/api/courses/{{course_id}}/contents",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"courses",
						"{{course_id}}",
						"contents"
					]
				}
			},
			"response": []
		},
		{
			"name": "courses/{{course_id}}/contents/{{content_id}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return the updated values\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const id = pm.environment.get(\"content_id\");\r",
							"    \r",
							"    pm.expect(jsonData.id).to.eql(id);\r",
							"    pm.expect(jsonData.name).to.eql(\"test2\");\r",
							"    pm.expect(jsonData.description).to.eql(\"test2\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"test2\",\r\n    \"description\": \"test2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/courses/{{course_id}}/contents/{{content_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"courses",
						"{{course_id}}",
						"contents",
						"{{content_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "courses/{{course_id}}/contents/{{content_id}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return deleted content's id\", function () {\r",
							"    const id = pm.environment.get(\"content_id\");\r",
							"    pm.response.to.have.body(id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5001/api/courses/{{course_id}}/contents/{{content_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"courses",
						"{{course_id}}",
						"contents",
						"{{content_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "courses/{{course_id}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return deleted course's id\", function () {\r",
							"    const id = pm.environment.get(\"course_id\");\r",
							"    pm.response.to.have.body(id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5001/api/courses/{{course_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"courses",
						"{{course_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "stats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return stats\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.numberOfUsers).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.numberOfContents).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.numberOfCourses).to.be.a(\"number\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5001/api/stats",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"stats"
					]
				}
			},
			"response": []
		},
		{
			"name": "auth/logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return true\", function () {\r",
							"    pm.response.to.have.body(\"true\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:5001/api/auth/logout",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"logout"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}